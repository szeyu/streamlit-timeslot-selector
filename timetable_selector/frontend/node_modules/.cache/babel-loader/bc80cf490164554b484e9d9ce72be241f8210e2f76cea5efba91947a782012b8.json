{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";// Function to generate time slots\nfunction generateTimeSlots(startTime,endTime,interval){const slots=[];let start=parseTime(startTime);const end=parseTime(endTime);while(start<end){const endSlot=new Date(start.getTime()+interval*60000);slots.push(\"\".concat(formatTime(start),\" - \").concat(formatTime(endSlot)));start=endSlot;}return slots;}// Function to parse a time string\nfunction parseTime(timeStr){const[hours,minutes]=timeStr.split(':').map(Number);const date=new Date();date.setHours(hours,minutes,0,0);return date;}// Function to format a Date object to a time string\nfunction formatTime(date){return date.toTimeString().slice(0,5);}// Function to handle the component's rendering\nfunction onRender(event){Streamlit.setFrameHeight();}// Function to handle document ready event\ndocument.addEventListener('DOMContentLoaded',()=>{const days=['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY'];const timeSlots=generateTimeSlots('08:00','20:00',30);const table=document.getElementById('time-slots-table');const theadRow=table.querySelector('thead tr');const tbody=table.querySelector('tbody');// Create header row with time slots\ntimeSlots.forEach(slot=>{const th=document.createElement('th');th.textContent=slot;theadRow.appendChild(th);});// Create rows for each day\ndays.forEach(day=>{const tr=document.createElement('tr');const dayCell=document.createElement('td');dayCell.textContent=day;tr.appendChild(dayCell);timeSlots.forEach(slot=>{const td=document.createElement('td');td.classList.add('time-slot');td.dataset.day=day;td.dataset.time=slot;td.addEventListener('click',()=>{td.classList.toggle('selected');// Update Streamlit when a time slot is clicked\nconst selectedSlots=document.querySelectorAll('.time-slot.selected');const selectedTimes=Array.from(selectedSlots).map(slot=>({day:slot.dataset.day,time:slot.dataset.time}));const selectedTimesJson=JSON.stringify(selectedTimes,null,2);Streamlit.setComponentValue(selectedTimesJson);});tr.appendChild(td);});tbody.appendChild(tr);});});// Attach our `onRender` handler to Streamlit's render event\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data\nStreamlit.setComponentReady();// Tell Streamlit to update our initial height\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","generateTimeSlots","startTime","endTime","interval","slots","start","parseTime","end","endSlot","Date","getTime","push","concat","formatTime","timeStr","hours","minutes","split","map","Number","date","setHours","toTimeString","slice","onRender","event","setFrameHeight","document","addEventListener","days","timeSlots","table","getElementById","theadRow","querySelector","tbody","forEach","slot","th","createElement","textContent","appendChild","day","tr","dayCell","td","classList","add","dataset","time","toggle","selectedSlots","querySelectorAll","selectedTimes","Array","from","selectedTimesJson","JSON","stringify","setComponentValue","events","RENDER_EVENT","setComponentReady"],"sources":["C:/Users/szeyu/Desktop/PC Document/EmbeddedLLM/ELLMScheduler-v2/component-template/template-reactless/timetable_selector/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\";\r\n\r\n// Function to generate time slots\r\nfunction generateTimeSlots(startTime: string, endTime: string, interval: number): string[] {\r\n    const slots: string[] = [];\r\n    let start = parseTime(startTime);\r\n    const end = parseTime(endTime);\r\n\r\n    while (start < end) {\r\n        const endSlot = new Date(start.getTime() + interval * 60000);\r\n        slots.push(`${formatTime(start)} - ${formatTime(endSlot)}`);\r\n        start = endSlot;\r\n    }\r\n\r\n    return slots;\r\n}\r\n\r\n// Function to parse a time string\r\nfunction parseTime(timeStr: string): Date {\r\n    const [hours, minutes] = timeStr.split(':').map(Number);\r\n    const date = new Date();\r\n    date.setHours(hours, minutes, 0, 0);\r\n    return date;\r\n}\r\n\r\n// Function to format a Date object to a time string\r\nfunction formatTime(date: Date): string {\r\n    return date.toTimeString().slice(0, 5);\r\n}\r\n\r\n// Function to handle the component's rendering\r\nfunction onRender(event: Event): void {\r\n    Streamlit.setFrameHeight();\r\n}\r\n\r\n// Function to handle document ready event\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY'];\r\n    const timeSlots = generateTimeSlots('08:00', '20:00', 30);\r\n    const table = document.getElementById('time-slots-table') as HTMLTableElement;\r\n    const theadRow = table.querySelector('thead tr') as HTMLTableRowElement;\r\n    const tbody = table.querySelector('tbody') as HTMLTableSectionElement;\r\n\r\n    // Create header row with time slots\r\n    timeSlots.forEach(slot => {\r\n        const th = document.createElement('th');\r\n        th.textContent = slot;\r\n        theadRow.appendChild(th);\r\n    });\r\n\r\n    // Create rows for each day\r\n    days.forEach(day => {\r\n        const tr = document.createElement('tr');\r\n        const dayCell = document.createElement('td');\r\n        dayCell.textContent = day;\r\n        tr.appendChild(dayCell);\r\n\r\n        timeSlots.forEach(slot => {\r\n            const td = document.createElement('td');\r\n            td.classList.add('time-slot');\r\n            td.dataset.day = day;\r\n            td.dataset.time = slot;\r\n            td.addEventListener('click', () => {\r\n                td.classList.toggle('selected');\r\n\r\n                // Update Streamlit when a time slot is clicked\r\n                const selectedSlots = document.querySelectorAll('.time-slot.selected');\r\n                const selectedTimes = Array.from(selectedSlots).map(slot => ({\r\n                    day: (slot as HTMLElement).dataset.day,\r\n                    time: (slot as HTMLElement).dataset.time\r\n                }));\r\n                const selectedTimesJson = JSON.stringify(selectedTimes, null, 2);\r\n                Streamlit.setComponentValue(selectedTimesJson);\r\n            });\r\n            tr.appendChild(td);\r\n        });\r\n\r\n        tbody.appendChild(tr);\r\n    });\r\n});\r\n\r\n// Attach our `onRender` handler to Streamlit's render event\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\r\n\r\n// Tell Streamlit we're ready to start receiving data\r\nStreamlit.setComponentReady();\r\n\r\n// Tell Streamlit to update our initial height\r\nStreamlit.setFrameHeight();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}