{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\n\n// Function to generate time slots\nfunction generateTimeSlots(startTime, endTime, interval) {\n  const slots = [];\n  let start = parseTime(startTime);\n  const end = parseTime(endTime);\n  while (start < end) {\n    const endSlot = new Date(start.getTime() + interval * 60000);\n    slots.push(`${formatTime(start)} - ${formatTime(endSlot)}`);\n    start = endSlot;\n  }\n  return slots;\n}\n\n// Function to parse a time string\nfunction parseTime(timeStr) {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n}\n\n// Function to format a Date object to a time string\nfunction formatTime(date) {\n  return date.toTimeString().slice(0, 5);\n}\n\n// Function to handle the component's rendering\nfunction onRender(event) {\n  const data = event.detail;\n\n  // Maintain compatibility with older versions of Streamlit that don't send a theme object.\n  if (data.theme) {\n    const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"})`;\n    button.style.border = borderStyling;\n    button.style.outline = borderStyling;\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled;\n\n  // RenderData.args is the JSON dictionary of arguments sent from the Python script.\n  let name = data.args[\"name\"];\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160);\n  Streamlit.setFrameHeight();\n}\n\n// Function to handle document ready event\ndocument.addEventListener('DOMContentLoaded', () => {\n  var _document$getElementB;\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n  const timeSlots = generateTimeSlots('08:00', '18:00', 30);\n  const table = document.getElementById('time-slots-table');\n  const theadRow = table.querySelector('thead tr');\n  const tbody = table.querySelector('tbody');\n\n  // Create header row with time slots\n  timeSlots.forEach(slot => {\n    const th = document.createElement('th');\n    th.textContent = slot;\n    theadRow.appendChild(th);\n  });\n\n  // Create rows for each day\n  days.forEach(day => {\n    const tr = document.createElement('tr');\n    const dayCell = document.createElement('td');\n    dayCell.textContent = day;\n    tr.appendChild(dayCell);\n    timeSlots.forEach(slot => {\n      const td = document.createElement('td');\n      td.classList.add('time-slot');\n      td.dataset.day = day;\n      td.dataset.time = slot;\n      td.addEventListener('click', () => {\n        td.classList.toggle('selected');\n      });\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n  (_document$getElementB = document.getElementById('confirm-btn')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.addEventListener('click', () => {\n    const selectedSlots = document.querySelectorAll('.time-slot.selected');\n    const selectedTimes = Array.from(selectedSlots).map(slot => ({\n      day: slot.dataset.day,\n      time: slot.dataset.time\n    }));\n    const selectedTimesJson = JSON.stringify(selectedTimes, null, 2);\n    const selectedTimesInput = document.getElementById('selected-times');\n    console.log(selectedTimesJson);\n    selectedTimesInput.dispatchEvent(new Event('change'));\n  });\n});\n\n// Add text and a button to the DOM\nconst span = document.body.appendChild(document.createElement(\"span\"));\nconst textNode = span.appendChild(document.createTextNode(\"\"));\nconst button = span.appendChild(document.createElement(\"button\"));\nbutton.textContent = \"Click Me!\";\n\n// Add a click handler to our button\nlet numClicks = 0;\nlet isFocused = false;\nbutton.onclick = function () {\n  numClicks += 1;\n  Streamlit.setComponentValue(numClicks);\n};\nbutton.onfocus = function () {\n  isFocused = true;\n};\nbutton.onblur = function () {\n  isFocused = false;\n};\n\n// Attach our `onRender` handler to Streamlit's render event\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data\nStreamlit.setComponentReady();\n\n// Tell Streamlit to update our initial height\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","generateTimeSlots","startTime","endTime","interval","slots","start","parseTime","end","endSlot","Date","getTime","push","formatTime","timeStr","hours","minutes","split","map","Number","date","setHours","toTimeString","slice","onRender","event","data","detail","theme","borderStyling","isFocused","button","style","border","outline","disabled","name","args","textNode","textContent","String","fromCharCode","setFrameHeight","document","addEventListener","_document$getElementB","days","timeSlots","table","getElementById","theadRow","querySelector","tbody","forEach","slot","th","createElement","appendChild","day","tr","dayCell","td","classList","add","dataset","time","toggle","selectedSlots","querySelectorAll","selectedTimes","Array","from","selectedTimesJson","JSON","stringify","selectedTimesInput","console","log","dispatchEvent","Event","span","body","createTextNode","numClicks","onclick","setComponentValue","onfocus","onblur","events","RENDER_EVENT","setComponentReady"],"sources":["C:/Users/szeyu/Desktop/PC Document/EmbeddedLLM/sandbox/component-template/template-reactless/timetable_selector/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\";\r\n\r\n// Function to generate time slots\r\nfunction generateTimeSlots(startTime: string, endTime: string, interval: number): string[] {\r\n    const slots: string[] = [];\r\n    let start = parseTime(startTime);\r\n    const end = parseTime(endTime);\r\n\r\n    while (start < end) {\r\n        const endSlot = new Date(start.getTime() + interval * 60000);\r\n        slots.push(`${formatTime(start)} - ${formatTime(endSlot)}`);\r\n        start = endSlot;\r\n    }\r\n\r\n    return slots;\r\n}\r\n\r\n// Function to parse a time string\r\nfunction parseTime(timeStr: string): Date {\r\n    const [hours, minutes] = timeStr.split(':').map(Number);\r\n    const date = new Date();\r\n    date.setHours(hours, minutes, 0, 0);\r\n    return date;\r\n}\r\n\r\n// Function to format a Date object to a time string\r\nfunction formatTime(date: Date): string {\r\n    return date.toTimeString().slice(0, 5);\r\n}\r\n\r\n// Function to handle the component's rendering\r\nfunction onRender(event: Event): void {\r\n    const data = (event as CustomEvent<RenderData>).detail;\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send a theme object.\r\n    if (data.theme) {\r\n        const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"})`;\r\n        button.style.border = borderStyling;\r\n        button.style.outline = borderStyling;\r\n    }\r\n\r\n    // Disable our button if necessary.\r\n    button.disabled = data.disabled;\r\n\r\n    // RenderData.args is the JSON dictionary of arguments sent from the Python script.\r\n    let name = data.args[\"name\"];\r\n    textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160);\r\n\r\n    Streamlit.setFrameHeight();\r\n}\r\n\r\n// Function to handle document ready event\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\r\n    const timeSlots = generateTimeSlots('08:00', '18:00', 30);\r\n    const table = document.getElementById('time-slots-table') as HTMLTableElement;\r\n    const theadRow = table.querySelector('thead tr') as HTMLTableRowElement;\r\n    const tbody = table.querySelector('tbody') as HTMLTableSectionElement;\r\n\r\n    // Create header row with time slots\r\n    timeSlots.forEach(slot => {\r\n        const th = document.createElement('th');\r\n        th.textContent = slot;\r\n        theadRow.appendChild(th);\r\n    });\r\n\r\n    // Create rows for each day\r\n    days.forEach(day => {\r\n        const tr = document.createElement('tr');\r\n        const dayCell = document.createElement('td');\r\n        dayCell.textContent = day;\r\n        tr.appendChild(dayCell);\r\n\r\n        timeSlots.forEach(slot => {\r\n            const td = document.createElement('td');\r\n            td.classList.add('time-slot');\r\n            td.dataset.day = day;\r\n            td.dataset.time = slot;\r\n            td.addEventListener('click', () => {\r\n                td.classList.toggle('selected');\r\n            });\r\n            tr.appendChild(td);\r\n        });\r\n\r\n        tbody.appendChild(tr);\r\n    });\r\n\r\n    document.getElementById('confirm-btn')?.addEventListener('click', () => {\r\n        const selectedSlots = document.querySelectorAll('.time-slot.selected');\r\n        const selectedTimes = Array.from(selectedSlots).map(slot => ({\r\n            day: (slot as HTMLElement).dataset.day,\r\n            time: (slot as HTMLElement).dataset.time\r\n        }));\r\n        const selectedTimesJson = JSON.stringify(selectedTimes, null, 2);\r\n        const selectedTimesInput = document.getElementById('selected-times') as HTMLInputElement;\r\n        console.log(selectedTimesJson);\r\n        selectedTimesInput.dispatchEvent(new Event('change'));\r\n    });\r\n});\r\n\r\n// Add text and a button to the DOM\r\nconst span = document.body.appendChild(document.createElement(\"span\"));\r\nconst textNode = span.appendChild(document.createTextNode(\"\"));\r\nconst button = span.appendChild(document.createElement(\"button\"));\r\nbutton.textContent = \"Click Me!\";\r\n\r\n// Add a click handler to our button\r\nlet numClicks = 0;\r\nlet isFocused = false;\r\nbutton.onclick = function (): void {\r\n    numClicks += 1;\r\n    Streamlit.setComponentValue(numClicks);\r\n};\r\n\r\nbutton.onfocus = function (): void {\r\n    isFocused = true;\r\n};\r\n\r\nbutton.onblur = function (): void {\r\n    isFocused = false;\r\n};\r\n\r\n// Attach our `onRender` handler to Streamlit's render event\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\r\n\r\n// Tell Streamlit we're ready to start receiving data\r\nStreamlit.setComponentReady();\r\n\r\n// Tell Streamlit to update our initial height\r\nStreamlit.setFrameHeight();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}