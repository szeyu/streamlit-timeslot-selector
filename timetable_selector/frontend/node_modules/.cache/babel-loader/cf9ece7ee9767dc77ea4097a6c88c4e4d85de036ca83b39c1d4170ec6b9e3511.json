{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"));\nconst textNode = span.appendChild(document.createTextNode(\"\"));\nconst button = span.appendChild(document.createElement(\"button\"));\nbutton.textContent = \"Click Me!\";\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0;\nlet isFocused = false;\nbutton.onclick = function () {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1;\n  Streamlit.setComponentValue(numClicks);\n};\nbutton.onfocus = function () {\n  isFocused = true;\n};\nbutton.onblur = function () {\n  isFocused = false;\n};\n\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"})`;\n    button.style.border = borderStyling;\n    button.style.outline = borderStyling;\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled;\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"];\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160);\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight();\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","span","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["C:/Users/szeyu/Desktop/PC Document/EmbeddedLLM/sandbox/component-template/template-reactless/my_component/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\r\n\r\n// Add text and a button to the DOM. (You could also add these directly\r\n// to index.html.)\r\nconst span = document.body.appendChild(document.createElement(\"span\"))\r\nconst textNode = span.appendChild(document.createTextNode(\"\"))\r\nconst button = span.appendChild(document.createElement(\"button\"))\r\nbutton.textContent = \"Click Me!\"\r\n\r\n// Add a click handler to our button. It will send data back to Streamlit.\r\nlet numClicks = 0\r\nlet isFocused = false\r\nbutton.onclick = function(): void {\r\n  // Increment numClicks, and pass the new value back to\r\n  // Streamlit via `Streamlit.setComponentValue`.\r\n  numClicks += 1\r\n  Streamlit.setComponentValue(numClicks)\r\n}\r\n\r\nbutton.onfocus = function(): void {\r\n  isFocused = true\r\n}\r\n\r\nbutton.onblur = function(): void {\r\n  isFocused = false\r\n}\r\n\r\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\r\nfunction onRender(event: Event): void {\r\n  // Get the RenderData from the event\r\n  const data = (event as CustomEvent<RenderData>).detail\r\n\r\n  // Maintain compatibility with older versions of Streamlit that don't send\r\n  // a theme object.\r\n  if (data.theme) {\r\n    // Use CSS vars to style our button border. Alternatively, the theme style\r\n    // is defined in the data.theme object.\r\n    const borderStyling = `1px solid var(${\r\n      isFocused ? \"--primary-color\" : \"gray\"\r\n    })`\r\n    button.style.border = borderStyling\r\n    button.style.outline = borderStyling\r\n  }\r\n\r\n  // Disable our button if necessary.\r\n  button.disabled = data.disabled\r\n\r\n  // RenderData.args is the JSON dictionary of arguments sent from the\r\n  // Python script.\r\n  let name = data.args[\"name\"]\r\n\r\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\r\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\r\n\r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight()\r\n}\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady()\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight()\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAoB,yBAAyB;;AAE/D;AACA;AACA,MAAMC,IAAI,GAAGC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACF,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC,CAAC;AACtE,MAAMC,QAAQ,GAAGL,IAAI,CAACG,WAAW,CAACF,QAAQ,CAACK,cAAc,CAAC,EAAE,CAAC,CAAC;AAC9D,MAAMC,MAAM,GAAGP,IAAI,CAACG,WAAW,CAACF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC,CAAC;AACjEG,MAAM,CAACC,WAAW,GAAG,WAAW;;AAEhC;AACA,IAAIC,SAAS,GAAG,CAAC;AACjB,IAAIC,SAAS,GAAG,KAAK;AACrBH,MAAM,CAACI,OAAO,GAAG,YAAiB;EAChC;EACA;EACAF,SAAS,IAAI,CAAC;EACdV,SAAS,CAACa,iBAAiB,CAACH,SAAS,CAAC;AACxC,CAAC;AAEDF,MAAM,CAACM,OAAO,GAAG,YAAiB;EAChCH,SAAS,GAAG,IAAI;AAClB,CAAC;AAEDH,MAAM,CAACO,MAAM,GAAG,YAAiB;EAC/BJ,SAAS,GAAG,KAAK;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQA,CAACC,KAAY,EAAQ;EACpC;EACA,MAAMC,IAAI,GAAID,KAAK,CAA6BE,MAAM;;EAEtD;EACA;EACA,IAAID,IAAI,CAACE,KAAK,EAAE;IACd;IACA;IACA,MAAMC,aAAa,GAAG,iBACpBV,SAAS,GAAG,iBAAiB,GAAG,MAAM,GACrC;IACHH,MAAM,CAACc,KAAK,CAACC,MAAM,GAAGF,aAAa;IACnCb,MAAM,CAACc,KAAK,CAACE,OAAO,GAAGH,aAAa;EACtC;;EAEA;EACAb,MAAM,CAACiB,QAAQ,GAAGP,IAAI,CAACO,QAAQ;;EAE/B;EACA;EACA,IAAIC,IAAI,GAAGR,IAAI,CAACS,IAAI,CAAC,MAAM,CAAC;;EAE5B;EACArB,QAAQ,CAACG,WAAW,GAAG,UAAUiB,IAAI,IAAI,GAAGE,MAAM,CAACC,YAAY,CAAC,GAAG,CAAC;;EAEpE;EACA;EACA;EACA;EACA7B,SAAS,CAAC8B,cAAc,CAAC,CAAC;AAC5B;;AAEA;AACA9B,SAAS,CAAC+B,MAAM,CAACC,gBAAgB,CAAChC,SAAS,CAACiC,YAAY,EAAEjB,QAAQ,CAAC;;AAEnE;AACA;AACAhB,SAAS,CAACkC,iBAAiB,CAAC,CAAC;;AAE7B;AACA;AACAlC,SAAS,CAAC8B,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}